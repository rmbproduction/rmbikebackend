"""
Django settings for authback project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta  # Add this import for JWT settings
import os
import dj_database_url
import cloudinary
import cloudinary.uploader
import cloudinary.api

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load Cloudinary configuration early
import cloudinary
import cloudinary.uploader
import cloudinary.api

# Get Cloudinary credentials
CLOUDINARY_CLOUD_NAME = config('CLOUDINARY_CLOUD_NAME', default='dz81bjuea')
CLOUDINARY_API_KEY = config('CLOUDINARY_API_KEY', default='')
CLOUDINARY_API_SECRET = config('CLOUDINARY_API_SECRET', default='')

# Configure Cloudinary directly
cloudinary.config(
    cloud_name=CLOUDINARY_CLOUD_NAME,
    api_key=CLOUDINARY_API_KEY,
    api_secret=CLOUDINARY_API_SECRET,
)

# Enhanced Cloudinary Storage Settings
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': CLOUDINARY_CLOUD_NAME,
    'API_KEY': CLOUDINARY_API_KEY,
    'API_SECRET': CLOUDINARY_API_SECRET,
    'SECURE': True,  # Use HTTPS
    'MEDIA_TAG': 'media',  # Tag for media files
    'INVALID_VIDEO_ERROR_MESSAGE': 'Please upload a valid video file.',
    'EXCLUDE_DELETE_ORPHANED_MEDIA_PATHS': [],  # Paths to exclude from cleanup
    'STATIC_TAG': 'static',  # Tag for static files
    'STATIC_IMAGES_EXTENSIONS': ['jpg', 'jpe', 'jpeg', 'jpc', 'jp2', 'j2k', 'wdp', 'jxr', 
                                'hdp', 'png', 'gif', 'webp', 'bmp', 'tif', 'tiff', 'ico'],
    'STATIC_FILES_ALLOWED_TYPES': ['image', 'raw', 'video'],
    'MAGIC_FILE_PATH': None,
    'PREFIX': 'rmb'  # Prefix for all uploaded files
}

# Set Cloudinary as the default file storage
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'

# Cloudinary transformations
CLOUDINARY_TRANSFORMATIONS = {
    'default': {
        'quality': 'auto:good',
        'fetch_format': 'auto',
        'secure': True
    },
    'thumbnail': {
        'width': 300,
        'height': 200,
        'crop': 'fill',
        'quality': 'auto:good'
    },
    'preview': {
        'width': 800,
        'height': 600,
        'crop': 'fill',
        'quality': 'auto:good'
    }
}

# Get host configuration from environment
HOST_DOMAIN = config('HOST_DOMAIN', default='localhost:8000')
HOST_PROTOCOL = config('HOST_PROTOCOL', default='http')

# Frontend URL configuration
FRONTEND_URL = config('FRONTEND_URL', default=f"{HOST_PROTOCOL}://{HOST_DOMAIN.replace(':8000', ':5173')}")
# In production, default to repairmybike.in
if os.environ.get('ENVIRONMENT', 'development') == 'production':
    # Force production URL in production environment
    # This will override any FRONTEND_URL that might contain localhost
    FRONTEND_URL = config('FRONTEND_URL', default='https://repairmybike.in')
    # Add a safety check to ensure we never use localhost in production
    if 'localhost' in FRONTEND_URL or '127.0.0.1' in FRONTEND_URL:
        FRONTEND_URL = 'https://repairmybike.in'

# Print the FRONTEND_URL for debugging
print(f"ENVIRONMENT: {os.environ.get('ENVIRONMENT', 'development')}")
print(f"FRONTEND_URL: {FRONTEND_URL}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-4ga9@g3zft*$zk1rwdu_au@v!w&zjfd%jodqv92=*s!2_x5r&r')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('ENVIRONMENT', 'development') != 'production'

# Dynamic allowed hosts based on HOST_DOMAIN
ALLOWED_HOSTS = [
    HOST_DOMAIN,
    'repairmybike.up.railway.app',
    'localhost',
    '127.0.0.1',
    '.railway.app',
    'repairmybike.in',
    'www.repairmybike.in',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'accounts',
    'corsheaders',
    'marketplace',
    'django_filters',
    'vehicle',
    'repairing_service',
    'subscription_plan',
    # Add Cloudinary app only
    'cloudinary',
    'cloudinary_storage',
    'tools.image_optimizer.apps.ImageOptimizerConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Add this as the first middleware
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this after security middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.RoleMiddleware',  # Add this line
    'tools.middleware.CacheControlMiddleware',  # Add cache control middleware
]

# Service Ports Configuration
SERVICE_PORTS = {
    'API_GATEWAY': 8080,
    'DJANGO_SERVER': 8000,
    'FRONTEND_VITE': 5173,
    'FRONTEND_REACT': 3000,
    'REDIS': 6379,
    'POSTGRES': 5432,
    'CELERY_FLOWER': 5555,
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    f"{HOST_PROTOCOL}://{HOST_DOMAIN}",
    "http://localhost:5173",  # Vite dev server
    "http://localhost:3000",  # React dev server
    "https://repairmybike.up.railway.app",
    "https://repairmybike.vercel.app",
    "https://repair-my-bike.vercel.app",
    "https://rmbfrontend.vercel.app",
    "https://repairmybike.in",
    "https://www.repairmybike.in",
]
CORS_ALLOW_CREDENTIALS = True

# Only allow all origins in development, not in production
CORS_ALLOW_ALL_ORIGINS = os.environ.get('ENVIRONMENT', 'development') == 'development'

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'access-control-allow-origin',
]

ROOT_URLCONF = 'authback.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'accounts.context_processors.user_roles',  # Add custom context processor
            ],
        },
    },
]

WSGI_APPLICATION = 'authback.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration debugging
print("Attempting to configure database...")

# Try to use PostgreSQL if DATABASE_URL is set (Railway)
DATABASE_URL = config('DATABASE_URL', default='', cast=str)
print(f"DATABASE_URL found: {'Yes' if DATABASE_URL else 'No'}")

if DATABASE_URL:
    try:
        if DATABASE_URL.startswith('postgres://') or DATABASE_URL.startswith('postgresql://'):
            DATABASES = {
                'default': dj_database_url.config(
                    default=DATABASE_URL,
                    conn_max_age=600,
                    conn_health_checks=True,
                )
            }
            print("Successfully configured PostgreSQL from DATABASE_URL")
    except Exception as e:
        print(f"Error configuring PostgreSQL from DATABASE_URL: {str(e)}")
        print("Falling back to local configuration")
else:
    print("No DATABASE_URL found, checking local PostgreSQL configuration...")
    # If no DATABASE_URL but PostgreSQL config is set, try to use it
    DB_USE_POSTGRES = config('DB_USE_POSTGRES', default='false', cast=str).lower() == 'true'
    print(f"DB_USE_POSTGRES setting: {DB_USE_POSTGRES}")
    
    if DB_USE_POSTGRES:
        try:
            db_name = config('DATABASE_NAME', default='rmbdev')
            db_user = config('DATABASE_USER', default='postgres')
            db_password = config('DATABASE_PASSWORD', default='password')
            db_host = config('DATABASE_HOST', default='localhost')
            db_port = config('DATABASE_PORT', default='5432')
            
        
            
            DATABASES = {
                "default": {
                    "ENGINE": "django.db.backends.postgresql_psycopg2",
                    "NAME": db_name,
                    "USER": db_user,
                    "PASSWORD": db_password,
                    "HOST": db_host,
                    "PORT": db_port,
                }
            }
            print("Successfully configured local PostgreSQL")
        except Exception as e:
            print(f"Error configuring local PostgreSQL: {str(e)}")
            print("Falling back to SQLite database")
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }
            print("Successfully configured SQLite database")
    else:
        print("PostgreSQL not enabled, using SQLite database")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        print("Successfully configured SQLite database")

print("Database configuration complete.")

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_ROOT = 'staticfiles'
STATIC_URL = '/static/'

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR,'staticfiles')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "staticassets")
]

MEDIA_ROOT =  os.path.join(BASE_DIR, 'public/static') 
MEDIA_URL = '/media/'

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Image optimization settings
ENABLE_AUTO_OPTIMIZATION = config('ENABLE_AUTO_OPTIMIZATION', default=True, cast=bool)
IMAGE_OPTIMIZATION_QUALITY = config('IMAGE_OPTIMIZATION_QUALITY', default=85, cast=int)
IMAGE_OPTIMIZATION_MAX_SIZE = config('IMAGE_OPTIMIZATION_MAX_SIZE', default=1920, cast=int)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.User'



LOGIN_REDIRECT_URL = '/login/success/'


# Security Settings - Enable in production
SECURE_SSL_REDIRECT = os.environ.get('ENVIRONMENT', 'development') == 'production'
SESSION_COOKIE_SECURE = os.environ.get('ENVIRONMENT', 'development') == 'production'
CSRF_COOKIE_SECURE = os.environ.get('ENVIRONMENT', 'development') == 'production'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Uncommented for Railway deployment
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
CSRF_TRUSTED_ORIGINS = [
    f"http://localhost:{SERVICE_PORTS['FRONTEND_VITE']}",
    'https://repairmybike.up.railway.app',
    'https://repairmybike.vercel.app',
    'https://repair-my-bike.vercel.app',
    'https://rmbfrontend.vercel.app',
    'https://repairmybike.in',
    'https://www.repairmybike.in',
]
# Rate Limiting Settings
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_KEY_PREFIX = 'ratelimit'
RATELIMIT_BLOCK = True
RATELIMIT_VIEW = 'accounts.views.rate_limit_view'

# Cache Configuration
# Determine if we should use Redis based on environment or explicit config
USE_REDIS = config('USE_REDIS', default=os.environ.get('ENVIRONMENT') == 'production', cast=bool)

# Set up cache based on Redis availability
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config('REDIS_PUBLIC_URL', default=f'redis://127.0.0.1:{SERVICE_PORTS["REDIS"]}/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'RETRY_ON_TIMEOUT': True,
            'MAX_CONNECTIONS': 100,
            'CONNECTION_POOL_KWARGS': {'max_connections': 100},
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
            'IGNORE_EXCEPTIONS': True,
        },
        'KEY_PREFIX': 'authback',
    }
} if USE_REDIS else {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Cache timeout settings
CACHE_TTL = 60 * 15  # Cache timeout increased to 15 minutes
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # Cache middleware timeout increased to 15 minutes

# Redis as the cache backend
DJANGO_REDIS_IGNORE_EXCEPTIONS = True
DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True

# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # Increased from 15 to 30 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    
    # Token handling settings
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=30),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
    
    # Add these settings for better token handling
    'TOKEN_OBTAIN_SERIALIZER': 'accounts.serializers.CustomTokenObtainPairSerializer',
    'TOKEN_REFRESH_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',
    'TOKEN_VERIFY_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenVerifySerializer',
    
    # Add token blacklist app config
    'BLACKLIST_TOKEN_CHECKS': [
        'rest_framework_simplejwt.token_blacklist.checks.BlacklistCheck',
    ],
}

# Cookie settings for JWT tokens
JWT_AUTH_COOKIE = 'access_token'
JWT_AUTH_REFRESH_COOKIE = 'refresh_token'
JWT_AUTH_COOKIE_SECURE = os.environ.get('ENVIRONMENT', 'development') == 'production'
JWT_AUTH_COOKIE_SAMESITE = 'Lax' if os.environ.get('ENVIRONMENT', 'development') == 'development' else 'Strict'
JWT_AUTH_COOKIE_HTTP_ONLY = True
JWT_AUTH_COOKIE_PATH = '/'
JWT_AUTH_COOKIE_DOMAIN = None  # Will use the current domain

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',  # Add this for file uploads
    ],
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'UNAUTHENTICATED_USER': 'django.contrib.auth.models.AnonymousUser',
}

CELERY_BROKER_URL = config('CELERY_BROKER_URL', default=f'redis://localhost:{SERVICE_PORTS["REDIS"]}/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default=f'redis://localhost:{SERVICE_PORTS["REDIS"]}/1')
CELERY_FLOWER_PORT = SERVICE_PORTS['CELERY_FLOWER']

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.hostinger.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')
SUPPORT_FROM_EMAIL = config('SUPPORT_FROM_EMAIL', default='support@repairmybike.in')

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'accounts.auth_backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Admin email address for notifications
ADMIN_EMAIL = config('ADMIN_EMAIL', default='admin@repairmybike.in')

# Channel layers configuration for WebSockets
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
        # For production, use Redis:
        # "BACKEND": "channels_redis.core.RedisChannelLayer",
        # "CONFIG": {
        #     "hosts": [(config('REDIS_HOST', default='localhost'), config('REDIS_PORT', default=6379, cast=int))],
        # },
    },
}

# Specify ASGI application
ASGI_APPLICATION = 'authback.asgi.application'