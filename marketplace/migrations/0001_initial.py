# Generated by Django 5.2 on 2025-05-26 13:26

import cloudinary.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import marketplace.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SellRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "registration_certificate",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Vehicle Registration Certificate (PDF/Image)",
                        max_length=255,
                        null=True,
                        verbose_name="document",
                    ),
                ),
                (
                    "insurance_document",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Insurance document (PDF/Image)",
                        max_length=255,
                        null=True,
                        verbose_name="document",
                    ),
                ),
                (
                    "puc_certificate",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Pollution Under Control Certificate (PDF/Image)",
                        max_length=255,
                        null=True,
                        verbose_name="document",
                    ),
                ),
                (
                    "ownership_transfer",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Ownership Transfer documents (PDF/Image)",
                        max_length=255,
                        null=True,
                        verbose_name="document",
                    ),
                ),
                (
                    "additional_documents",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Any additional documents (PDF/Image)",
                        max_length=255,
                        null=True,
                        verbose_name="document",
                    ),
                ),
                (
                    "photo_front",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Front view of vehicle",
                        max_length=255,
                        null=True,
                        verbose_name="image",
                    ),
                ),
                (
                    "photo_back",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Back view of vehicle",
                        max_length=255,
                        null=True,
                        verbose_name="image",
                    ),
                ),
                (
                    "photo_left",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Left side view of vehicle",
                        max_length=255,
                        null=True,
                        verbose_name="image",
                    ),
                ),
                (
                    "photo_right",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Right side view of vehicle",
                        max_length=255,
                        null=True,
                        verbose_name="image",
                    ),
                ),
                (
                    "photo_dashboard",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Dashboard/Instrument cluster view",
                        max_length=255,
                        null=True,
                        verbose_name="image",
                    ),
                ),
                (
                    "photo_odometer",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Odometer reading",
                        max_length=255,
                        null=True,
                        verbose_name="image",
                    ),
                ),
                (
                    "photo_engine",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Engine view",
                        max_length=255,
                        null=True,
                        verbose_name="image",
                    ),
                ),
                (
                    "photo_extras",
                    cloudinary.models.CloudinaryField(
                        blank=True,
                        help_text="Additional photos/modifications",
                        max_length=255,
                        null=True,
                        verbose_name="image",
                    ),
                ),
                (
                    "pickup_slot",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Scheduled pickup time",
                    ),
                ),
                (
                    "pickup_address",
                    models.TextField(
                        blank=True, default="", help_text="Address for vehicle pickup"
                    ),
                ),
                (
                    "contact_number",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Contact number for pickup",
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("submitted", "Submitted"),
                            ("confirmed", "Confirmed by Call"),
                            ("inspection_scheduled", "Inspection Scheduled"),
                            ("under_inspection", "Under Inspection"),
                            ("service_center", "At Service Center"),
                            ("inspection_done", "Inspection Done"),
                            ("offer_made", "Offer Made"),
                            ("counter_offer", "Counter Offer by Customer"),
                            ("deal_closed", "Deal Closed"),
                            ("rejected", "Rejected"),
                        ],
                        default="submitted",
                        help_text="Current status of sell request",
                        max_length=30,
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True, help_text="Reason if request is rejected", null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who wants to sell the vehicle",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sell_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PurchaseOffer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "market_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Estimated market value",
                        max_digits=10,
                    ),
                ),
                (
                    "offer_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Our offer price",
                        max_digits=10,
                    ),
                ),
                (
                    "price_breakdown",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text='Format: {"base_price": 1000, "deductions": {"tyres": -100}}',
                    ),
                ),
                (
                    "is_negotiable",
                    models.BooleanField(
                        default=True, help_text="Whether price is negotiable"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("initial", "Initial Offer"),
                            ("counter_offered", "Counter Offered By Customer"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("renegotiated", "Renegotiated By Company"),
                            ("expired", "Expired"),
                        ],
                        default="initial",
                        help_text="Current status of the offer",
                        max_length=20,
                    ),
                ),
                (
                    "counter_offer",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Counter offer from seller",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "counter_offer_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When customer made counter offer",
                        null=True,
                    ),
                ),
                (
                    "customer_notes",
                    models.TextField(
                        blank=True,
                        help_text="Customer notes for counter offer",
                        null=True,
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        default=marketplace.models.get_default_valid_until,
                        help_text="Offer validity period",
                    ),
                ),
                (
                    "sell_request",
                    models.OneToOneField(
                        help_text="Related sell request",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="offer",
                        to="marketplace.sellrequest",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("new_sell_request", "New Sell Request"),
                            ("status_change", "Status Change"),
                            ("offer_made", "Offer Made"),
                            ("counter_offer", "Counter Offer"),
                            ("offer_accepted", "Offer Accepted"),
                            ("offer_rejected", "Offer Rejected"),
                            ("inspection_scheduled", "Inspection Scheduled"),
                            ("inspection_completed", "Inspection Completed"),
                            ("new_booking", "New Booking"),
                            ("booking_created", "Booking Created"),
                            ("booking_confirmed", "Booking Confirmed"),
                            ("booking_completed", "Booking Completed"),
                            ("booking_cancelled", "Booking Cancelled"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("message", models.TextField()),
                ("is_read", models.BooleanField(default=False)),
                ("data", models.JSONField(blank=True, default=dict)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="marketplace_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sell_request",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="marketplace.sellrequest",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InspectionReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "engine_condition",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=1,
                        help_text="Engine condition rating",
                    ),
                ),
                (
                    "transmission_condition",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=1,
                        help_text="Transmission condition rating",
                    ),
                ),
                (
                    "suspension_condition",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=1,
                        help_text="Suspension condition rating",
                    ),
                ),
                (
                    "tyre_condition",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=1,
                        help_text="Tyre condition rating",
                    ),
                ),
                (
                    "brake_condition",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=1,
                        help_text="Brake system condition rating",
                    ),
                ),
                (
                    "electrical_condition",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=1,
                        help_text="Electrical system condition rating",
                    ),
                ),
                (
                    "frame_condition",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=1,
                        help_text="Frame condition rating",
                    ),
                ),
                (
                    "paint_condition",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=1,
                        help_text="Paint condition rating",
                    ),
                ),
                (
                    "overall_rating",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=1,
                        editable=False,
                        help_text="Overall vehicle condition rating (auto-calculated)",
                    ),
                ),
                (
                    "estimated_repair_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Estimated cost of repairs needed",
                        max_digits=10,
                    ),
                ),
                (
                    "remarks",
                    models.TextField(
                        blank=True, default="", help_text="Additional inspection notes"
                    ),
                ),
                (
                    "inspection_photos",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of inspection photo paths",
                    ),
                ),
                (
                    "passed",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        help_text="Whether vehicle passed inspection (auto-calculated)",
                    ),
                ),
                (
                    "inspector",
                    models.ForeignKey(
                        blank=True,
                        help_text="Inspector who performed the inspection",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inspections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sell_request",
                    models.OneToOneField(
                        help_text="Related sell request",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inspection_report",
                        to="marketplace.sellrequest",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "vehicle_type",
                    models.CharField(
                        choices=[
                            ("bike", "Bike"),
                            ("scooter", "Scooter"),
                            ("electric_scooter", "Electric Scooter"),
                            ("electric_bike", "Electric Bike"),
                        ],
                        default="bike",
                        help_text="Type of two-wheeler",
                        max_length=20,
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Vehicle manufacturer",
                        max_length=50,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Vehicle model name",
                        max_length=50,
                    ),
                ),
                (
                    "Mileage",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Vehicle Mileage",
                        max_length=50,
                    ),
                ),
                (
                    "year",
                    models.PositiveIntegerField(
                        default=marketplace.models.get_current_year,
                        help_text="Manufacturing year",
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(
                                marketplace.models.get_current_year
                            ),
                        ],
                    ),
                ),
                (
                    "registration_number",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Vehicle registration number",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "kms_driven",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total kilometers driven",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "fuel_type",
                    models.CharField(
                        choices=[("petrol", "Petrol"), ("electric", "Electric")],
                        default="petrol",
                        help_text="Fuel type (petrol/electric)",
                        max_length=10,
                    ),
                ),
                (
                    "engine_capacity",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Engine capacity in CC (petrol) or Watts (electric)",
                        null=True,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        default="Not Specified",
                        help_text="Vehicle color",
                        max_length=30,
                    ),
                ),
                (
                    "last_service_date",
                    models.DateField(
                        blank=True, help_text="Date of last service", null=True
                    ),
                ),
                (
                    "insurance_valid_till",
                    models.DateField(
                        blank=True, help_text="Insurance validity date", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("under_inspection", "Under Inspection"),
                            ("inspection_done", "Inspection Done"),
                            ("sold", "Sold"),
                        ],
                        default="under_inspection",
                        help_text="Current vehicle status",
                        max_length=20,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Selling price of the vehicle",
                        max_digits=10,
                    ),
                ),
                (
                    "expected_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Expected price suggested by the seller",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "emi_available",
                    models.BooleanField(
                        default=True,
                        help_text="Whether EMI is available for this vehicle",
                    ),
                ),
                (
                    "emi_months",
                    models.JSONField(
                        default=list, help_text="Available EMI tenures in months"
                    ),
                ),
                (
                    "images",
                    models.JSONField(
                        default=dict,
                        help_text='Format: {"thumbnail": "url", "main": "url", "gallery": ["url1", "url2"]}',
                    ),
                ),
                (
                    "features",
                    models.JSONField(
                        default=list, help_text="List of vehicle features"
                    ),
                ),
                (
                    "highlights",
                    models.JSONField(
                        default=list, help_text="Key highlights of the vehicle"
                    ),
                ),
                (
                    "bookable",
                    models.BooleanField(
                        blank=True,
                        default=True,
                        help_text="Whether the vehicle can be booked",
                        null=True,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current owner of the vehicle",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vehicles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="sellrequest",
            name="vehicle",
            field=models.OneToOneField(
                blank=True,
                help_text="Vehicle being sold",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sell_request",
                to="marketplace.vehicle",
            ),
        ),
        migrations.CreateModel(
            name="VehicleBooking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current status of the booking",
                        max_length=20,
                    ),
                ),
                (
                    "booking_date",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the booking was created"
                    ),
                ),
                (
                    "contact_number",
                    models.CharField(
                        help_text="Contact number for follow-up", max_length=15
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes for the booking"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who booked the vehicle",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vehicle_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        help_text="Vehicle being booked",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bookings",
                        to="marketplace.vehicle",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="VehiclePurchase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Payment Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("payment_id", models.CharField(blank=True, max_length=100, null=True)),
                ("payment_method", models.CharField(blank=True, max_length=50)),
                ("purchase_date", models.DateTimeField(auto_now_add=True)),
                ("completion_date", models.DateTimeField(blank=True, null=True)),
                ("delivery_address", models.TextField()),
                ("contact_number", models.CharField(max_length=15)),
                ("notes", models.TextField(blank=True)),
                (
                    "buyer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="vehicle_purchases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="purchases",
                        to="marketplace.vehicle",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(
                fields=["vehicle_type", "brand", "model"],
                name="marketplace_vehicle_838c3f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(
                fields=["registration_number"], name="marketplace_registr_e3be92_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(fields=["status"], name="marketplace_status_d985c1_idx"),
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(fields=["price"], name="marketplace_price_10cd5f_idx"),
        ),
    ]
